{"version":3,"sources":["js/timer-new.js"],"names":["refs","clockDays","document","querySelector","clockHours","clockMins","clockSecs","CountdownTimer","constructor","onCheck","targetDate","finish","setInterval","currentTime","Date","now","deltaTime","time","getTimeComponents","days","pad","Math","floor","hours","mins","secs","value","String","padStart","Timer","selector","updateClockface","textContent"],"mappings":";;;AA8EC,aA9ED,QAAA,iBAEA,MAAMA,EAAO,CAETC,UAAWC,SAASC,cAAc,uBACpCC,WAAYF,SAASC,cAAc,wBACnCE,UAAWH,SAASC,cAAc,uBAClCG,UAAWJ,SAASC,cAAc,wBAGpC,MAAMI,EACFC,aAAY,QAAEC,EAAF,WAAWC,IAClBD,KAAAA,QAAUA,EACVC,KAAAA,WAAaA,EACbC,KAAAA,SAGLA,SAGIC,YAAY,KACFC,MAAAA,EAAcC,KAAKC,MACnBC,EAAY,KAAKN,WAAaG,EAC9BI,EAAO,KAAKC,kBAAkBF,GAG/BP,KAAAA,QAAQQ,IACd,KAIXC,kBAAkBD,GA0BP,MAAA,CAAEE,KArBA,KAAKC,IAAIC,KAAKC,MAAML,EAAQ,QAqBtBM,MAdL,KAAKH,IAAIC,KAAKC,MAAOL,EAAQ,MAAyB,OAc1CO,KARb,KAAKJ,IAAIC,KAAKC,MAAOL,EAAQ,KAAoB,MAQ9BQ,KAFnB,KAAKL,IAAIC,KAAKC,MAAOL,EAAQ,IAAc,OAMxDG,IAAIM,GACOC,OAAAA,OAAOD,GAAOE,SAAS,EAAG,MAIrC,MAAMC,EAAQ,IAAItB,EAAe,CAC7BuB,SAAU,WACVpB,WAAY,IAAII,KAAK,gBACrBL,QAASsB,IAGb,SAASA,GAAgB,KAAEZ,EAAF,MAAQI,EAAR,KAAeC,EAAf,KAAqBC,IACzCzB,EAAKC,UAAU+B,eAAiBb,IACnCnB,EAAKI,WAAW4B,eAAiBT,IACjCvB,EAAKK,UAAU2B,eAAiBR,IAChCxB,EAAKM,UAAU0B,eAAiBP","file":"timer-new.96315f54.js","sourceRoot":"../src","sourcesContent":["import '../styles.css';\n\nconst refs = {\n    // timer: document.querySelector('#timer-1'),\n    clockDays: document.querySelector('[data-value=\"days\"]'),\n  clockHours: document.querySelector('[data-value=\"hours\"]'),\n  clockMins: document.querySelector('[data-value=\"mins\"]'),\n  clockSecs: document.querySelector('[data-value=\"secs\"]')\n};\n\nclass CountdownTimer {\n    constructor({ onCheck, targetDate }) {\n    this.onCheck = onCheck;\n    this.targetDate = targetDate;\n    this.finish();\n}\n    \n    finish() {\n        // const finishTime = new Date('Jul 17, 2021');\n\n        setInterval(() => {\n            const currentTime = Date.now();\n            const deltaTime = this.targetDate - currentTime;\n            const time = this.getTimeComponents(deltaTime);\n            // console.log(currentTime - finishTime);\n            // console.log(`${days}:${hours}:${mins}:${secs}`);\n            this.onCheck(time);\n        }, 1000);\n    }\n    \n\ngetTimeComponents(time) {\n    /*\n * Оставшиеся дни: делим значение UTC на 1000 * 60 * 60 * 24, количество\n * миллисекунд в одном дне (миллисекунды * секунды * минуты * часы)\n */\nconst days = this.pad(Math.floor(time / (1000 * 60 * 60 * 24)));\n\n/*\n * Оставшиеся часы: получаем остаток от предыдущего расчета с помощью оператора\n * остатка % и делим его на количество миллисекунд в одном часе\n * (1000 * 60 * 60 = миллисекунды * минуты * секунды)\n */\nconst hours = this.pad(Math.floor((time % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)));\n\n/*\n * Оставшиеся минуты: получаем оставшиеся минуты и делим их на количество\n * миллисекунд в одной минуте (1000 * 60 = миллисекунды * секунды)\n */\nconst mins = this.pad(Math.floor((time % (1000 * 60 * 60)) / (1000 * 60)));\n\n/*\n * Оставшиеся секунды: получаем оставшиеся секунды и делим их на количество\n * миллисекунд в одной секунде (1000)\n */\nconst secs = this.pad(Math.floor((time % (1000 * 60)) / 1000));\n\n    return { days, hours, mins, secs };\n}\n\n// выводит значения таймера в двузначном виде\npad(value) {\n    return String(value).padStart(2, '0');\n}\n}\n\nconst Timer = new CountdownTimer({\n    selector: '#timer-1',\n    targetDate: new Date('Jul 17, 2025'),\n    onCheck: updateClockface,\n});\n\nfunction updateClockface({ days, hours, mins, secs }) {\n     refs.clockDays.textContent = `${days}`;\n  refs.clockHours.textContent = `${hours}`;\n  refs.clockMins.textContent = `${mins}`;\n  refs.clockSecs.textContent = `${secs}`;\n    // refs.timer.textContent = `${days}:${hours}:${mins}:${secs}`;\n}"]}